# Generated by Django 4.2.2 on 2023-06-12 00:19

import Workout_Logbook.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import multiselectfield.db.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUserExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Exercise Name')),
                ('aliases', models.CharField(blank=True, help_text='(optional)', max_length=100, null=True, verbose_name='Aliases')),
                ('primary_muscles', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('abs', 'abdominals'), ('ham', 'hamstrings'), ('cal', 'calves'), ('sho', 'shoulders'), ('add', 'adductors'), ('glu', 'glutes'), ('qua', 'quadriceps'), ('bic', 'biceps'), ('for', 'forearms'), ('abd', 'abductors'), ('tri', 'triceps'), ('che', 'chest'), ('mbk', 'middle back'), ('lbk', 'lower back'), ('tra', 'traps'), ('lat', 'lats'), ('nec', 'neck')], default='sho', max_length=3, null=True, verbose_name='Primary Muscles')),
                ('secondary_muscles', multiselectfield.db.fields.MultiSelectField(blank=True, choices=[('abs', 'abdominals'), ('ham', 'hamstrings'), ('cal', 'calves'), ('sho', 'shoulders'), ('add', 'adductors'), ('glu', 'glutes'), ('qua', 'quadriceps'), ('bic', 'biceps'), ('for', 'forearms'), ('abd', 'abductors'), ('tri', 'triceps'), ('che', 'chest'), ('mbk', 'middle back'), ('lbk', 'lower back'), ('tra', 'traps'), ('lat', 'lats'), ('nec', 'neck')], default='sho', max_length=3, null=True, verbose_name='Secondary Muscles')),
                ('force', models.CharField(choices=[('pull', 'Pull'), ('push', 'Push'), ('stat', 'Static')], default='pull', max_length=4, verbose_name='Force')),
                ('level', models.CharField(choices=[('beg', 'beginner'), ('int', 'intermediate'), ('exp', 'expert')], default='int', max_length=3, verbose_name='Level')),
                ('mechanic', models.CharField(choices=[('comp', 'compound'), ('isol', 'isolation')], default='comp', max_length=4, verbose_name='Mechanic')),
                ('equipment', models.CharField(choices=[('bod', 'body only'), ('mac', 'machine'), ('ket', 'kettlebells'), ('dum', 'dumbbell'), ('cab', 'cable'), ('bar', 'barbell'), ('ban', 'bands'), ('med', 'medicine ball'), ('exe', 'exercise ball'), ('cba', 'e-z curl bar'), ('fro', 'foam roll')], default='mac', max_length=3, verbose_name='Equipment')),
                ('category', models.CharField(choices=[('stren', 'strength'), ('stret', 'stretching'), ('plyom', 'plyometrics'), ('stron', 'strongman'), ('power', 'powerlifting'), ('cardi', 'cardio'), ('olwei', 'olympic weightlifting'), ('cross', 'crossfit'), ('weibw', 'weighted bodyweight'), ('assbw', 'assisted bodyweight')], default='stren', max_length=5, verbose_name='Category')),
                ('instructions', models.TextField(blank=True, help_text='(optional)', null=True, verbose_name='Instructions')),
                ('description', models.TextField(blank=True, help_text='(optional)', null=True, verbose_name='Description')),
                ('tips', models.TextField(blank=True, help_text='(optional)', null=True, verbose_name='Tips')),
            ],
            options={
                'verbose_name': 'Custom User Exercise',
                'verbose_name_plural': 'Custom User Exercises',
            },
        ),
        migrations.CreateModel(
            name='UserPhisyqueStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('weight', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True, verbose_name='Current Weight')),
                ('neck', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Neck Size (cm)')),
                ('chest', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Chest Size (cm)')),
                ('shoulder', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Shoulder Size (cm)')),
                ('back', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Back Size (cm)')),
                ('waist', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Waist Size (cm)')),
                ('abdomen', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Abdomen Size (cm)')),
                ('hips', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Hips Size (cm)')),
                ('thigh_r', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Right Thigh Size (cm)')),
                ('thigh_l', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Left Thigh Size (cm)')),
                ('calf_r', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Right Calf Size (cm)')),
                ('calf_l', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Calf Left Size (cm)')),
                ('biceps_r', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Right Biceps Size (cm)')),
                ('biceps_l', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Left Biceps Size (cm)')),
                ('forearm_r', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Right Forearm Size (cm)')),
                ('forearm_l', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Left Forearm Size (cm)')),
                ('wrist_r', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Right Wrist Size (cm)')),
                ('wrist_l', models.PositiveSmallIntegerField(blank=True, null=True, verbose_name='Left Wrist Size (cm)')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('height', models.PositiveSmallIntegerField(verbose_name='Height (cm)')),
                ('birthday', models.DateField(verbose_name='Birth Day')),
                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=2, verbose_name='Gender')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkoutTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Template Name')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('time', models.TimeField(verbose_name='Time')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutExerciseTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Workout_Logbook.customuserexercise', verbose_name='Exercise')),
                ('workout_template', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Workout_Logbook.workouttemplate', verbose_name='Workout Template')),
            ],
        ),
        migrations.CreateModel(
            name='WorkoutExercise',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='Workout_Logbook.customuserexercise', verbose_name='Exercise')),
                ('workout_session', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Workout_Logbook.workoutsession', verbose_name='Workout Session')),
            ],
        ),
        migrations.CreateModel(
            name='UserPhisyqueStatusPhoto',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('photo', models.ImageField(upload_to=Workout_Logbook.models.get_photo_path, verbose_name='Photo')),
                ('label', models.CharField(blank=True, max_length=50, null=True, verbose_name='Label')),
                ('status', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Workout_Logbook.userphisyquestatus')),
            ],
        ),
        migrations.AddField(
            model_name='userphisyquestatus',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='SetTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=7, verbose_name='Weight')),
                ('reps', models.PositiveSmallIntegerField(default=1, verbose_name='Reps')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Workout_Logbook.workoutexercisetemplate', verbose_name='Exercise Template')),
            ],
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, default=0.0, max_digits=7, verbose_name='Weight Used')),
                ('reps', models.PositiveSmallIntegerField(default=1, verbose_name='Reps Done')),
                ('rest_time', models.PositiveSmallIntegerField(default=60, verbose_name='Rest Time (sec)')),
                ('exercise', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='Workout_Logbook.workoutexercise', verbose_name='Exercise')),
            ],
        ),
        migrations.AddField(
            model_name='customuserexercise',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
    ]
