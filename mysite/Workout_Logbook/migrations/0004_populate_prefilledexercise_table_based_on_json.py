# Generated by Django 4.2.2 on 2023-06-16 01:16

from django.db import migrations


def populate_table(apps, schema_editor):
    from Workout_Logbook.models import PrefilledExercise
    import json
    f = open('exercises.json')
    data = json.load(f)
    exercises = data.get('exercises')
    fields = [field.name for field in PrefilledExercise._meta.fields]
    fields.remove('id')
    muscle_choices = PrefilledExercise.MuscleGroupChoices.__members__.values()
    force_choices = PrefilledExercise.ForceChoices.__members__.values()
    level_choices = PrefilledExercise.LevelChoices.__members__.values()
    mechanic_choices = PrefilledExercise.MechanicChoices.__members__.values()
    equipment_choices = PrefilledExercise.EquipmentChoices.__members__.values()
    category_choices = PrefilledExercise.CategoryChoices.__members__.values()
    for exercise in exercises:
        ex = PrefilledExercise()
        primary_muscles = []
        secondary_muscles = []
        for muscle in muscle_choices:
            for e_p_muscle in exercise.get('primary_muscles'):
                if muscle.label == e_p_muscle:
                    primary_muscles.append(muscle)
            for e_s_muscle in exercise.get('secondary_muscles'):
                if muscle.label == e_s_muscle:
                    secondary_muscles.append(muscle)
        ex.primary_muscles = ','.join(primary_muscles)
        ex.secondary_muscles = ','.join(secondary_muscles)
        ex.force = next((muscle for muscle in force_choices if muscle.label == exercise.get('force')), None)
        ex.level = next((muscle for muscle in level_choices if muscle.label == exercise.get('level')), None)
        ex.mechanic = next((muscle for muscle in mechanic_choices if muscle.label == exercise.get('mechanic')), None)
        ex.equipment = next((muscle for muscle in equipment_choices if muscle.label == exercise.get('equipment')), None)
        ex.category = next((muscle for muscle in category_choices if muscle.label == exercise.get('category')), None)
        ex.name = exercise.get('name')
        ex.aliases = exercise.get('aliases')
        ex.instructions = exercise.get('instructions')
        ex.description = exercise.get('description')
        ex.tips = exercise.get('tips')
        ex.save()


class Migration(migrations.Migration):

    dependencies = [
        ('Workout_Logbook', '0003_alter_customuserexercise_equipment_and_more'),
    ]

    operations = [
        migrations.RunPython(populate_table)
    ]
